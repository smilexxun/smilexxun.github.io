<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>防抖和节流</title>
      <link href="/post/f85ddf3d.html"/>
      <url>/post/f85ddf3d.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是节流和防抖函数？"><a href="#什么是节流和防抖函数？" class="headerlink" title="什么是节流和防抖函数？"></a>什么是节流和防抖函数？</h2><p><strong>在一定的时间内防止相同时间重复被触发，从而起到优化执行效率的效果。</strong></p><p><strong>最常见的使用如：在手机端做滑动分页，在设置距离页面底部50px范围内时就去请求接口，此时在50px范围内时，可能会出现scroll事件频繁触发接口请求，会造成页面频繁的请求接口。</strong></p><h2 id="防抖实现"><a href="#防抖实现" class="headerlink" title="防抖实现"></a>防抖实现</h2><p><strong>防抖可用于按钮点击上，当频繁的点击一个按钮时，每次点击的时间间隔小于wait则不在触发相应事件</strong></p><p><strong>使用闭包原理，在函数内定义timer，要使用的事件指向debounce方法去执行防抖函数，因为方法指向了防抖函数，所以每次执行进来timer不会被重置，会保留上次的记录（即timer在防抖函数内属于全局变量，当执行return function时才去修改全局timer）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 触发回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; wait 防抖触发时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Boolean</span>&#125; immediate 是否立即执行 true-立即执行、false-非立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait = <span class="number">300</span>, immediate</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用闭包定义timer</span></span><br><span class="line"><span class="keyword">let</span> timer;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="comment">// 立即执行</span></span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">let</span> callNow = !timer;</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果立即执行的话，在wait时间范围执行完成之后则不在触发</span></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 使用arguments获取参数，回传到回调方法内</span></span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">param1, param2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(param1, param2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> runDebounce = <span class="title function_">debounce</span>(callback, <span class="number">500</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 执行防抖</span></span><br><span class="line"><span class="title function_">runDebounce</span>(<span class="string">&#x27;参数一&#x27;</span>, <span class="string">&#x27;参数二&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="节流实现"><a href="#节流实现" class="headerlink" title="节流实现"></a>节流实现</h2><p><strong>节流实现同防抖原理一样，不过节流的目的是处理在一定的范围内重复触发事件，加上节流之后可以将频繁触发事件修改为在指定的wait时间之后执行一次</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 触发回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; wait 节流触发时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, wait = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 使用闭包定义timer</span></span><br><span class="line"><span class="keyword">let</span> timer;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 使用arguments获取参数，回传到回调方法内</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;, wait)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">param1, param2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(param1, param2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> runThrottle = <span class="title function_">throttle</span>(callback, <span class="number">500</span>);</span><br><span class="line"><span class="comment">// 执行节流</span></span><br><span class="line"><span class="title function_">runThrottle</span>(<span class="string">&#x27;参数一&#x27;</span>, <span class="string">&#x27;参数二&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金额格式转换</title>
      <link href="/post/9d398fbd.html"/>
      <url>/post/9d398fbd.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NumFormat</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;0.00&#x27;</span></span><br><span class="line">  value = value.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">var</span> intPart = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(value) <span class="comment">// 获取整数部分</span></span><br><span class="line">  <span class="keyword">var</span> intPartFormat = intPart.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=(?:\d&#123;3&#125;)+$)/g</span>, <span class="string">&#x27;$1,&#x27;</span>) <span class="comment">// 将整数部分逢三一断</span></span><br><span class="line">  <span class="keyword">var</span> floatPart = <span class="string">&#x27;.00&#x27;</span> <span class="comment">// 预定义小数部分</span></span><br><span class="line">  <span class="keyword">var</span> value2Array = value.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">  <span class="comment">// =2表示数据有小数位</span></span><br><span class="line">  <span class="keyword">if</span> (value2Array.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    floatPart = value2Array[<span class="number">1</span>].<span class="title function_">toString</span>() <span class="comment">// 拿到小数部分</span></span><br><span class="line">    <span class="keyword">if</span> (floatPart.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> intPartFormat + <span class="string">&#x27;.&#x27;</span> + floatPart + <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> intPartFormat + <span class="string">&#x27;.&#x27;</span> + floatPart</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> intPartFormat + floatPart</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首字母转小写、首字母转大写、中划线转驼峰、驼峰转中划线</title>
      <link href="/post/undefined.html"/>
      <url>/post/undefined.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母小写</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">lowerCase</span> = (<span class="params">str = <span class="string">&#x27;&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/\b(\w)|\s(\w)/g</span>;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(reg, <span class="function">(<span class="params">m</span>) =&gt;</span> m.<span class="title function_">toLowerCase</span>());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母大写</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">upperCase</span> = (<span class="params">str = <span class="string">&#x27;&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/\b(\w)|\s(\w)/g</span>;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(reg, <span class="function">(<span class="params">m</span>) =&gt;</span> m.<span class="title function_">toUpperCase</span>());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中划线转驼峰</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toHump</span> = (<span class="params">name = <span class="string">&#x27;&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> name.<span class="title function_">replace</span>(<span class="regexp">/\-(\w)/g</span>, <span class="function">(<span class="params">all, letter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> letter.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 驼峰转换中划线</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toLine</span> = (<span class="params">name = <span class="string">&#x27;&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> name.<span class="title function_">replace</span>(<span class="regexp">/([A-Z])/g</span>, <span class="string">&#x27;-$1&#x27;</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径是否存在，不存在时直接创建</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkDirExist</span> = (<span class="params">folderpath</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pathArr = folderpath.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> _path = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pathArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathArr[i]) &#123;</span><br><span class="line">      _path += <span class="string">`/<span class="subst">$&#123;pathArr[i]&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(_path)) &#123;</span><br><span class="line">        fs.<span class="title function_">mkdirSync</span>(_path);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  lowerCase,</span><br><span class="line">  upperCase,</span><br><span class="line">  toHump,</span><br><span class="line">  toLine,</span><br><span class="line">  checkDirExist,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
